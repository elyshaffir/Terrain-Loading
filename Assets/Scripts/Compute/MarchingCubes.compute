#pragma kernel MarchCubes
#include "Imported/MarchTables.compute"
#include "Utils/DataStructures/Point.compute"
#include "Utils/DataStructures/Triangle.compute"
#include "Utils/ChunkIndexing.compute"

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<Point> points;
StructuredBuffer<uint3> cubesToMarch;

uint numPointsX;
uint numPointsY;

float isoLevel;

float3 InterpolateVerts(Point v1, Point v2)
{
	float t = (isoLevel - v1.surfaceLevel) / (v2.surfaceLevel - v1.surfaceLevel);
	return v1.position + t * (v2.position - v1.position);
}

int GetCubeIndex(Point cubeCorners[8])
{
	int cubeIndex = 0;
	if (cubeCorners[0].surfaceLevel < isoLevel)
		cubeIndex |= 1;
	if (cubeCorners[1].surfaceLevel < isoLevel)
		cubeIndex |= 2;
	if (cubeCorners[2].surfaceLevel < isoLevel)
		cubeIndex |= 4;
	if (cubeCorners[3].surfaceLevel < isoLevel)
		cubeIndex |= 8;
	if (cubeCorners[4].surfaceLevel < isoLevel)
		cubeIndex |= 16;
	if (cubeCorners[5].surfaceLevel < isoLevel)
		cubeIndex |= 32;
	if (cubeCorners[6].surfaceLevel < isoLevel)
		cubeIndex |= 64;
	if (cubeCorners[7].surfaceLevel < isoLevel)
		cubeIndex |= 128;
	return cubeIndex;
}

[numthreads(5, 1, 1)]
void MarchCubes(uint3 id : SV_DispatchThreadID)
{
	uint cubeToMarchIndex = IndexFromCoords(id.x, numPointsX, id.y, numPointsY, id.z);
	if (cubeToMarchIndex < (uint)cubesToMarch.Length)
	{
		uint3 cubeToMarch = cubesToMarch[cubeToMarchIndex];
		Point cubeCorners[8] = {
			points[IndexFromCoords(cubeToMarch.x, numPointsX, cubeToMarch.y, numPointsY, cubeToMarch.z)],
			points[IndexFromCoords(cubeToMarch.x + 1, numPointsX, cubeToMarch.y, numPointsY, cubeToMarch.z)],
			points[IndexFromCoords(cubeToMarch.x + 1, numPointsX, cubeToMarch.y, numPointsY, cubeToMarch.z + 1)],
			points[IndexFromCoords(cubeToMarch.x, numPointsX, cubeToMarch.y, numPointsY, cubeToMarch.z + 1)],
			points[IndexFromCoords(cubeToMarch.x, numPointsX, cubeToMarch.y + 1, numPointsY, cubeToMarch.z)],
			points[IndexFromCoords(cubeToMarch.x + 1, numPointsX, cubeToMarch.y + 1, numPointsY, cubeToMarch.z)],
			points[IndexFromCoords(cubeToMarch.x + 1, numPointsX, cubeToMarch.y + 1, numPointsY, cubeToMarch.z + 1)],
			points[IndexFromCoords(cubeToMarch.x, numPointsX, cubeToMarch.y + 1, numPointsY, cubeToMarch.z + 1)]};

		int cubeIndex = GetCubeIndex(cubeCorners);

		for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
		{
			int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
			int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

			int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
			int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

			int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
			int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

			Triangle tri;
			tri.vertexA = InterpolateVerts(cubeCorners[a0], cubeCorners[b0]);
			tri.vertexB = InterpolateVerts(cubeCorners[a1], cubeCorners[b1]);
			tri.vertexC = InterpolateVerts(cubeCorners[a2], cubeCorners[b2]);
			triangles.Append(tri);
		}
	}
}