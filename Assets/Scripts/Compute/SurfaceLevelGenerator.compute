#pragma kernel GenerateSurfaceLevel

#include "Imported/Noise.compute"

static const int numThreadsSurfaceLevel = 5;

struct Point { // Appears twice since importing in HLSL is a headache
	float3 position;	
	float surfaceLevel;
	float2 onEdges;
};

RWStructuredBuffer<Point> points;
int numPointsX;
int numPointsY;
int numPointsZ;

float noiseScale;
int octaves;
StructuredBuffer<float3> offsets;
float3 offset;
float weightMultiplier;
float persistence;
float lacunarity;
float floorOffset;
float noiseWeight;
float4 params;
float hardFloor;
float hardFloorWeight;
float offsetNoise; // basically seed

float generateNoise(float3 pos)
{	
	float noise = 0;
	float frequency = noiseScale / 100;	
	float amplitude = 1;
	float weight = 1;	
	for (int j = 0; j < octaves; j++) {
		float n = snoise((pos + offsetNoise) * frequency + offsets[j]);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}
	float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;	
	if (pos.y < hardFloor) {
		finalVal += hardFloorWeight;
	}

	return finalVal;
}

int indexFromCoords(uint x, uint y, uint z)
{	
	return z * numPointsX * numPointsY + y * numPointsX + x;
}

float2 calculateOnEdges(uint x, uint z)
{
	float2 onEdges = float2(0, 0);
	if (x + 1 == numPointsX)
	{
		onEdges.x = 1;
	}
	else if (x == 0)
	{
		onEdges.x = -1;
	}

	if (z + 1 == numPointsZ)
	{
		onEdges.y = 1;
	}
	else if (z == 0)
	{
		onEdges.y = -1;
	}
	return onEdges;
}

[numthreads(numThreadsSurfaceLevel, numThreadsSurfaceLevel, numThreadsSurfaceLevel)]
void GenerateSurfaceLevel(uint3 id : SV_DispatchThreadID)
{
	if (id.x < numPointsX && id.y < numPointsY && id.z < numPointsZ) {
		float3 pos = float3(id.x, id.y, id.z) + offset + float3(sign(id.x), sign(id.y), sign(id.z));
		float generatedNoise = generateNoise(pos);		
		int index = indexFromCoords(id.x, id.y, id.z);		
		
		Point p;
		p.position = pos;
		p.surfaceLevel = -pos.y + generatedNoise;				
		p.onEdges = calculateOnEdges(id.x, id.z);
		points[index] = p;		
	}
}
