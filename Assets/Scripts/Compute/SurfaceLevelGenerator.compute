#pragma kernel GenerateSurfaceLevel
#include "Imported/Noise.compute"
#include "Utils/DataStructures/Point.compute"
#include "Utils/ChunkIndexing.compute"
#include "Utils/CubeManaging.compute"

static const int numThreadsSurfaceLevel = 5;

RWStructuredBuffer<Point> points;
RWStructuredBuffer<uint> relevantCubeCorners;
StructuredBuffer<float> alterations;

uint numPointsX;
uint numPointsY;

float noiseScale;
int octaves;
float3 offset;
float weightMultiplier;
float persistence;
float lacunarity;
float floorOffset;
float noiseWeight;
float4 params;
float hardFloor;
float hardFloorWeight;
float offsetNoise;

float isoLevel;

float GenerateNoise(float3 pos)
{
	float noise = 0;
	float frequency = noiseScale / 100;	
	float amplitude = 1;
	float weight = 1;	
	for (int i = 0; i < octaves; i++)
	{
		float n = SNoise((pos + offsetNoise) * frequency);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}
	float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y % params.x) * params.y;
	if (pos.y < hardFloor)
	{
		finalVal += hardFloorWeight;
	}

	return finalVal;
}

[numthreads(numThreadsSurfaceLevel, numThreadsSurfaceLevel, numThreadsSurfaceLevel)]
void GenerateSurfaceLevel(uint3 id : SV_DispatchThreadID)
{
	float3 pos = float3(id.x, id.y, id.z) + offset;
	float generatedNoise = GenerateNoise(pos);
	int index = IndexFromCoords(id.x, numPointsX, id.y, numPointsY, id.z);

	Point p;
	p.position = id;
	p.surfaceLevel = generatedNoise - pos.y + alterations[index];
		
	if (abs(p.surfaceLevel - isoLevel) < 20)
	{
		AddRelevantCubes(id, numPointsX, numPointsY, relevantCubeCorners);
	}	
	points[index] = p;
}
