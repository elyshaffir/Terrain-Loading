#pragma kernel GenerateSurfaceLevel
#include "Imported/Noise.compute"
#include "Utils/DataStructures/Point.compute"
#include "Utils/ChunkIndexing.compute"

static const int numThreadsSurfaceLevel = 5;

RWStructuredBuffer<Point> points;
RWStructuredBuffer<uint> relevantCubeCorners;

uint numPointsX;
uint numPointsY;
uint numPointsZ;

float noiseScale;
int octaves;
float3 offset;
float weightMultiplier;
float persistence;
float lacunarity;
float floorOffset;
float noiseWeight;
float4 params;
float hardFloor;
float hardFloorWeight;
float offsetNoise;

float isoLevel;

float generateNoise(float3 pos)
{
	float noise = 0;
	float frequency = noiseScale / 100;	
	float amplitude = 1;
	float weight = 1;	
	for (int j = 0; j < octaves; j++) {
		float n = snoise((pos + offsetNoise) * frequency);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v * weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}
	float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;	
	if (pos.y < hardFloor) {
		finalVal += hardFloorWeight;
	}

	return finalVal;
}

void AddCube(uint3 cube)
{
	uint index = indexFromCoordsInCubes(cube.x, numPointsX, cube.y, numPointsY, cube.z);
	relevantCubeCorners[index] = 1;	
}

void AddRelevantCubes(uint3 id)
{		
	AddCube(id);
	if (id.x > 0)
	{
		AddCube(uint3(id.x - 1, id.y, id.z));
		if (id.y > 0)
		{
			AddCube(uint3(id.x - 1, id.y - 1, id.z));
			if (id.z > 0)
			{
				AddCube(uint3(id.x - 1, id.y - 1, id.z - 1));
			}
		}
		if (id.z > 0)
		{
			AddCube(uint3(id.x - 1, id.y, id.z - 1));
		}
	}
	if (id.y > 0)
	{
		AddCube(uint3(id.x, id.y - 1, id.z));
		if (id.z > 0)
		{
			AddCube(uint3(id.x, id.y - 1, id.z - 1));
		}
	}
	if (id.z > 0)
	{
		AddCube(uint3(id.x, id.y, id.z - 1));
	}
}

[numthreads(numThreadsSurfaceLevel, numThreadsSurfaceLevel, numThreadsSurfaceLevel)]
void GenerateSurfaceLevel(uint3 id : SV_DispatchThreadID)
{	
	float3 pos = float3(id.x, id.y, id.z) + offset; // World position
	float generatedNoise = generateNoise(pos);
	int index = indexFromCoords(id.x, numPointsX, id.y, numPointsY, id.z);

	Point p;
	p.position = id; // Local position in chunk
	p.surfaceLevel = generatedNoise - pos.y;
		
	if (abs(p.surfaceLevel - isoLevel) < 1.6) // Finding optimal number will create an optimal marching amount, if holes appear enlarge this number
	{		
		AddRelevantCubes(id);		
	}
	p.onEdges = calculateOnEdges(id.x, numPointsX, id.y, numPointsY, id.z, numPointsZ);
	points[index] = p;
}
